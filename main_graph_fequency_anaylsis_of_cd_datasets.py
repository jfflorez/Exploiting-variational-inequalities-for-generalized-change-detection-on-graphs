import numpy as np
import pandas as pd
import os
import pickle
import matplotlib.pyplot as plt
from skimage.measure import regionprops

import utils.gcd_utils as gcd_utils


base_dir = os.getcwd()
datasets_dir = os.path.join(base_dir,'datasets')
datasets_dir = os.path.join(datasets_dir ,'cd')

# Load dataset
#dataset_name = 'Atlantico'
dataset_name = 'California'
#dataset_name = 'Mulargia'
dataset_name = 'Toulouse'
#dataset_name = 'Alaska'

dataset_list = ['Alaska','California','Atlantico','Mulargia','Toulouse','Shuguang']
table_attributes = ['n','n_pos','solidity','f_min','f_max','f_k','k','cum_energy_k']

output_dir = './results/graph_fourier_analysis'

Table = np.zeros((len(dataset_list),len(table_attributes)))

for dataset_idx in range(len(dataset_list)):

    dataset_name = dataset_list[dataset_idx]
    dataset = gcd_utils.dataset_loader(datasets_dir,dataset_name)
    num_spixels = 2400
    r = 2
    # Compute average signals based on the slic superpixels and the avg func as median 
    prepro_params = {'sp_method': 'slic',
                    'iqr_clipping':False,
                    'robust_avg_signals':True} # controls 

    # Segments image space into superpixels (or segments), and 
    # extract average and feature signals from pre and post event images at the superpixels.
    X_mean, X, F, segments = gcd_utils.prepro_pipeline(dataset,num_spixels,r,prepro_params)

    # Infer graph G from avg. signals using Kalofolia's graph structure learning model 
    n = X_mean[0].shape[0] # number of nodes

    gl_params = {'model': 'Kalofolias', # or 'Gaussian'
                    'k': int(np.sqrt(n)),
                    'knn_edge_cons': True,
                    'k_': 5*int(np.sqrt(n)),
                    'fusion_rule': 'max', 
                    'tol': 1e-5 # stopping tolerance
                    }

    W, outparams = gcd_utils.construct_adj_matrix(X_mean, gl_params)

    # Obtain graph Fourier transform basis of L_G = diag(W1) - W
    U = gcd_utils.construct_subspace(W,param={'basis_params': ('sc',n)})

    # Define undersampled ground truth change map
    f = F[:,0]
    f[f==0] = -1 # turn zeroes to negative ones 

    props = regionprops(dataset['gt'])


    gft_freqs = U[1]
    gft_coeffs = U[0].T@f
    gft_energy_spectrum = gft_coeffs**2
    gft_energy_spectrum = gft_energy_spectrum/np.sum(gft_energy_spectrum)
    gft_cum_energy = np.cumsum(gft_energy_spectrum)

    k = np.argmin((gft_cum_energy-0.9)**2)
    f_k = gft_freqs[k]
    gtf_cum_energy_k = gft_cum_energy[k]
    f_min = np.min(gft_freqs)
    f_max = np.max(gft_freqs)

    # 
    Table[dataset_idx,0] = int(n)
    Table[dataset_idx,1] = int(np.sum((f==1).flatten()))
    Table[dataset_idx,2] = props[0]['solidity'] 
    Table[dataset_idx,3] = f_min
    Table[dataset_idx,4] = f_max
    Table[dataset_idx,5] = f_k
    Table[dataset_idx,6] = int(k)
    Table[dataset_idx,7] = gtf_cum_energy_k

    fig, ax = plt.subplots(2,1,sharex=True)
    markerline, stemlines, baseline = ax[0].stem(np.log10(U[1]),gft_energy_spectrum,'.-')
    baseline.set_visible(False)
    plt.setp(stemlines, linewidth=0.5)
    #ax[0].set_xlabel('graph frequency ($\lambda_j$)')
    ax[0].set_ylabel('$<u_k,x>^2/\|U^Tx\|_2^2$')
    #ax[0].set_xticks(U[0][np.arange(0,n,10)])
    ax[0].set_title('Normalized GFT energy spectrum')

    x = np.logspace(np.ceil(np.log10(f_min)),np.ceil(np.log10(f_max)),5)
    markerline, stemlines, baseline = ax[1].stem(np.log10(gft_freqs),gft_cum_energy,'.')
    plt.setp(stemlines, linewidth=0.5)
    ax[1].set_xlabel('graph frequency ($\lambda_k$)')
    ax[1].set_ylabel('$\sum_{j=1}^{k}<u_j,x>^2/\|U^Tx\|_2^2$')
    ax[1].set_xticks(np.log10(x),np.round(x,2))
    baseline.set_visible(False)
    ax[1].set_title('Cumulative normalized GFT energy spectrum')
    plt.savefig(os.path.join(output_dir,"fig_GFT_analysis_dataset_"+ dataset_name +".png"), dpi=600, bbox_inches='tight')
    plt.savefig(os.path.join(output_dir,"fig_GFT_analysis_dataset_"+ dataset_name +".svg"), dpi=600, bbox_inches='tight')

data_frame = pd.DataFrame(Table,index=dataset_list,columns=table_attributes)
pickle_out = open("gft_analysis_data_frame.pickle","wb")
pickle.dump(data_frame, pickle_out)
pickle_out.close()

