import matplotlib.pyplot as plt
import pickle
import os 

import utils.gcd_utils as gcd_utils


""" Display prevously computed results from experiment in Sec. VI-B Change probability and change map estimation from a few
labeled nodes. """

# Define dataset and results directories (Make sure exp_001_run_semisupervised_cd_experiment_and_record_results.py)
dirname = os.path.dirname(__file__)
datasets_dir = os.path.join(dirname, 'datasets')
out_fn = lambda db_idx,db_name, ext: '\\Exp_001_on_db_'+ str(db_idx) + '_' + db_name + ext

results_dir = os.path.join(dirname, 'results')
results_dir = os.path.join(results_dir,'FinalResults_13_02_2023')

list_algs_filter = ['LP', '2-GCN', '2-SGCN', 'Proposed (RLP,2)', 'Proposed (2-GCN,2)']
#for m_idx in range(len(m)):
dataset_names = ['Alaska','California','Atlantico', 'Mulargia','Toulouse','Shuguang']
m = [15,5,16,4,17,8]

for db_idx in range(len(dataset_names)):
    dataset_name = dataset_names[db_idx]
    #dataset = sio.loadmat(datasets_dir +  dict_names[dataset_name])
    dataset = gcd_utils.dataset_loader(datasets_dir,dataset_name)
    file_name = out_fn(db_idx,dataset_names[db_idx],'_best_prob_maps_'+'m_'+str(m[db_idx])+'.pkl')
    probability_maps = pickle.load( open(results_dir+file_name,"rb"))

    segments = probability_maps['segments']
    list_algs = list(probability_maps.keys())
    list_algs.remove('segments')
    #list_algs_filter = ['LP','2-GCN', '2-SGCN', 
    #                    'KMeans(RLP)', 'KMeans(2-GCN)',
    #                    'Proposed (RLP,2)','Proposed (2-GCN,2)']

    fig1, ax1 = plt.subplots(2, len(list_algs_filter)+1, figsize=(20, 10), sharex=True, sharey=True)
    #fig1.tight_layout()

    cntr = 0
    ax1[0,cntr].imshow(dataset['gt'])
    ax1[1,cntr].set_axis_off()
    if db_idx == 0:
        ax1[0,cntr].set_title('Ground truth', fontdict = {'fontsize':15})
        ax1[0,cntr].set_ylabel(dataset_names[db_idx], fontdict = {'fontsize':15})
    else:
        ax1[0,cntr].set_ylabel(dataset_names[db_idx], fontdict = {'fontsize':15})
    
    cntr = cntr+1
    n1, n2 = segments.shape
    for alg in list_algs_filter:

        upsampled_prob_map = gcd_utils.spixels_upsampling(probability_maps[alg][1],segments)
        c_hat = upsampled_prob_map>0.5 # change map
        kappa, tpr, tnr, conf_img_dict = gcd_utils.kappa_coeff(dataset['gt'].flatten().astype(bool), c_hat.flatten().astype(bool) )
        

        if cntr < len(list_algs_filter):
            img = ax1[0,cntr].imshow(upsampled_prob_map.reshape(segments.shape),vmin = 0, vmax = 1)
            gcd_utils.plot_confusion_img_on_ax(conf_img_dict,n1,n2,ax1[1,cntr],add_legend=False if cntr > 1 else True)

        else:
            img = ax1[0,cntr].imshow(upsampled_prob_map.reshape(segments.shape),vmin = 0, vmax = 1)
            gcd_utils.plot_confusion_img_on_ax(conf_img_dict,n1,n2,ax1[1,cntr],add_legend=False)
            
            if db_idx == 0:
                fig1.colorbar(img, ax=ax1, location='top',shrink=0.35)  
        if db_idx == 0:
            if not alg in ['2-GCN','2-SGCN']:
                if 'Proposed' in alg:
                    ax1[0,cntr].set_title(alg.replace('Proposed','Prop.'), fontdict = {'fontsize':15})
                else:
                    ax1[0,cntr].set_title(alg, fontdict = {'fontsize':15})
            else:
                ax1[0,cntr].set_title(alg + ' Network', fontdict = {'fontsize':15})            

        ax1[0,cntr].set_xticks([])
        ax1[0,cntr].set_yticks([])       
        ax1[1,cntr].set_xticks([])
        ax1[1,cntr].set_yticks([]) 

        cntr = cntr + 1
    if db_idx==0:
        DPI = 400
        img_dir = "./figs\\figs_semisup_res_"+str(DPI)
        if not os.path.exists(img_dir):
            os.mkdir(img_dir)
    #plt.figure(fig1.number)
    plt.savefig( img_dir + "\\fig_prob_maps_"+ dataset_name +".png", dpi=DPI, bbox_inches='tight')
    plt.savefig( img_dir + "\\fig_prob_maps_"+ dataset_name +".svg", dpi=DPI, bbox_inches='tight')
    
    #plt.close(fig1)
    #plt.figure(fig2.number)
    #plt.savefig( img_dir + "\\fig_conf_maps_"+ dataset_name +".png", dpi=DPI, bbox_inches='tight')
    #plt.close(fig2)