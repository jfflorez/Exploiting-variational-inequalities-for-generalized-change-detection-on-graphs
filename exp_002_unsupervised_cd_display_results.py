import os
import numpy as np
import matplotlib.pyplot as plt
import pickle

import utils.gcd_utils as gcd_utils

""" Display previously computed results from experiment in Sec. VI-C Unsupervised change map estimation using signal decom-
position. """

dirname = os.path.dirname(__file__)
datasets_dir = os.path.join(dirname, 'datasets')
out_fn = lambda db_idx,db_name, ext: 'Exp_002_unsupervised_on_db_'+ str(db_idx) + '_' + db_name + ext
results_dir = os.path.join(dirname, 'results')
results_dir = os.path.join(results_dir,'FinalResults_13_02_2023')


n_trials = 1
label_rate_cases = 3
dataset_names = ['Alaska','California','Atlantico', 'Mulargia','Toulouse','Shuguang']

list_algs_filter = ['LP', '2-GCN', '2-SGCN', 'Proposed (RLP,2)','Proposed (RLP,inf)','Proposed (2-GCN,2)','Proposed (2-GCN,inf)']

#for m_idx in range(len(m)):

# create image directory
DPI = 400
img_dir = "./figs\\figs_unsupv_res_"+str(DPI)
if not os.path.exists(img_dir):
    os.mkdir(img_dir)
                    
for db_idx in range(len(dataset_names)):
        dataset_name = dataset_names[db_idx]
        dataset = gcd_utils.dataset_loader(datasets_dir,dataset_name) 

        file_name = out_fn(db_idx,dataset_names[db_idx],'_output_unsup_analysis'+'.pkl')

        #list_algs = list(output.keys())
        list_img = ['Estimated avg. \n pre-event img', 'Original avg. \n post-event img',  
                    "Estimated diff. \n signal's mag. img", 'Segmented \n mag. img', 'Confusion \n change map', 'Ground truth']
        list_img_reversed = ['Original avg. \n post-event img', 'Estimated avg. \n pre-event img',  
                    "Estimated diff. \n signal's mag. img", 'Segmented \n mag. img','Confusion \n  change map', 'Ground truth']
        #list_algs.remove('segments')
        #list_algs_filter = ['Prop. Unsup. (RLP,2)', 'Prop. Unsup. (RLP,inf)']
        list_algs_filter = ['Prop. Unsup. (RLP,2)', 'Prop. Unsup. (RLP,inf)','Prop. Unsup. (2-GCN,2)', 'Prop. Unsup. (2-GCN,inf)']

        for alg in list_algs_filter:
            if '(RLP,2)' in alg:
                ext = '_RLP_2'
                file_name = out_fn(db_idx,dataset_names[db_idx],ext+'.pkl')
            elif '(RLP,inf)' in alg:
                ext = '_RLP_inf'
                file_name = out_fn(db_idx,dataset_names[db_idx],'_RLP_inf'+'.pkl')
            elif '(2-GCN,2)' in alg:
                ext = '_2-GCN_2'
                file_name = out_fn(db_idx,dataset_names[db_idx],ext+'.pkl')
            elif '(2-GCN,inf)' in alg:
                ext = '_2-GCN_inf'
                file_name = out_fn(db_idx,dataset_names[db_idx],ext+'.pkl')
            output = pickle.load( open(os.path.join(results_dir,file_name),"rb"))
            segments = output['segments']

            X2 = np.reshape(np.mean(output['x2'],axis=1)[segments.flatten()-1],segments.shape)
            X1_hat = np.reshape(np.mean(output['x1_hat'],axis=1)[segments.flatten()-1],segments.shape)
            DiffSigMag = np.reshape(np.mean(output['delta_mag'],axis=1)[segments.flatten()-1],segments.shape)
            #C_hat = DiffSigMag > output['thresholds_v02'][1]
            segm_hat = np.digitize(DiffSigMag, bins=np.array(output['thresholds_v02']))
            c_hat = np.digitize(DiffSigMag, bins=[output['thresholds_v02'][1]])
            kappa, tpr, tnr, conf_img_dict = gcd_utils.kappa_coeff(dataset['gt'].flatten().astype(bool), c_hat.flatten().astype(bool) )
            n1, n2 = segments.shape
            
            #fig2, ax2 = plt.subplots(1, len(list_algs_filter)+1, figsize=(10, 10), sharex=True, sharey=True)
            fig1, ax1 = plt.subplots(1, len(list_img), figsize=(30, 10), sharex=False, sharey=True)
            #fig1, ax1 = plt.subplots(1, len(list_img), sharex=False, sharey=True)

            fontsize = 20
            ax1[0].imshow(X1_hat)
            #ax1[0].set_ylabel(dataset_name,fontdict={'fontsize':15})
            ax1[0].set_ylabel(dataset_name,fontdict={'fontsize':fontsize})
            ax1[1].imshow(X2)
            ax1[2].imshow(DiffSigMag,cmap='gist_gray')
            #fig1.colorbar(img, ax=ax1[2], location='right')#,shrink=0.35) 
            ax1[3].imshow(segm_hat)
            gcd_utils.plot_confusion_img_on_ax(conf_img_dict,n1,n2,ax1[4],add_legend=True,default_loc=True)

            #fig_tmp = plt.figure()
            #ax_tmp = fig_tmp.add_axes(ax1[4].get_position())
            
            #ax1[4].__dict__.update(ax_tmp.__dict__)
            #ax1[4]
            #ax1[4].legend(fontsize=10)
            ax1[5].imshow(dataset['gt'])
            if db_idx == 0:
                for i in range(len(list_img)):
                    #ax1[i].set_title(list_img[i],fontdict={'fontsize':15})    
                    ax1[i].set_title(list_img[i],fontdict={'fontsize':fontsize})                 
                    ax1[i].set_xticks([])
                    ax1[i].set_yticks([])     
            elif 'Atlantico' in dataset_name: 
                for i in range(len(list_img)):
                    #ax1[i].set_title(list_img_reversed[i],fontdict={'fontsize':15})
                    ax1[i].set_title(list_img_reversed[i],fontdict={'fontsize':fontsize})                     
                    ax1[i].set_xticks([])
                    ax1[i].set_yticks([])     
            else:
                for i in range(len(list_img)):
                    #ax1[i].set_title(list_img[i],fontdict={'fontsize':15})                    
                    ax1[i].set_xticks([])
                    ax1[i].set_yticks([])               
            

            plt.savefig(img_dir+ "\\fig_unsupervised_result_imgs_"+ dataset_name + '_'+ ext +".png", dpi=DPI, bbox_inches='tight')
